<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');use PhpOffice\PhpSpreadsheet\Spreadsheet;use PhpOffice\PhpSpreadsheet\Writer\Xlsx;use NXP\MathExecutor;class Formula extends Admin_Controller {	private $error = array();	public function __construct(){		parent::__construct();		$this->load->model('formula_model');		$this->load->model('salary/salary_model');				//$this->load->model('formula_shift_model');		//$this->load->model('formula_time_model');			}	public function index(){      	$this->lang->load('formula');		$this->template->set_meta_title($this->lang->line('heading_title'));		$this->getList();  	}	protected function search() {		$requestData= $_REQUEST;		$totalData = $this->formula_model->getTotalFormulas();		$totalFiltered = $totalData;		$filter_data = array(			'filter_search'  => $requestData['search']['value'],			'order'  		 => $requestData['order'][0]['dir'],			'sort' 			 => $requestData['order'][0]['column'],			'start' 		 => $requestData['start'],			'limit' 		 => $requestData['length']		);		$totalFiltered = $this->formula_model->getTotalFormulas($filter_data);		$filteredData = $this->formula_model->getFormulas($filter_data);		//printr($filteredData);		$datatable=array();		foreach($filteredData as $result) {						$action  = '<div class="btn-group btn-group-sm pull-right">';			$action .= 		'<a class="btn btn-sm btn-primary" href="'.admin_url('formula/view/'.$result->id).'"><i class="fa fa-eye"></i></a>';			$action .= 		'<a class="btn btn-sm btn-primary" href="'.admin_url('formula/edit/'.$result->id).'"><i class="fa fa-pencil"></i></a>';			$action .=		'<a class="btn-sm btn btn-danger btn-remove" href="'.admin_url('formula/delete/'.$result->id).'" onclick="return confirm(\'Are you sure?\') ? true : false;"><i class="fa fa-trash-o"></i></a>';			$action .= '</div>';			$datatable[]=array(				'<input type="checkbox" name="selected[]" value="'.$result->id.'" />',				$result->branch_name?$result->branch_name:"All Branch",				$result->code,				html_entity_decode(stripslashes($result->formula), ENT_QUOTES, 'UTF-8'),				$action			);		}		//printr($datatable);		$json_data = array(			"draw"            => isset($requestData['draw']) ? intval( $requestData['draw'] ):1,			"recordsTotal"    => intval( $totalData ),			"recordsFiltered" => intval( $totalFiltered ),			"data"            => $datatable		);		$this->output		->set_content_type('application/json')		->set_output(json_encode($json_data));  // send data as json format	}	public function add(){		$this->lang->load('formula');		$this->template->set_meta_title($this->lang->line('heading_title'));		if ($this->input->server('REQUEST_METHOD') === 'POST' && $this->validateForm()){				$userid=$this->formula_model->addFormula($this->input->post());			$this->session->set_flashdata('message', 'formula Saved Successfully.');			redirect(ADMIN_PATH.'/formula');		}		$this->getForm();	}	public function edit(){		$this->lang->load('formula');		$this->template->set_meta_title($this->lang->line('heading_title'));		if ($this->input->server('REQUEST_METHOD') === 'POST'){				$user_id=$this->uri->segment(4);			$this->formula_model->editFormula($user_id,$this->input->post());			$this->session->set_flashdata('message', 'formula Updated Successfully.');			redirect(ADMIN_PATH.'/formula');		}		$this->getForm();	}	public function delete(){		if ($this->input->post('selected')){         $selected = $this->input->post('selected');      }else{         $selected = (array) $this->uri->segment(4);       }		$this->formula_model->deleteFormula($selected);		$this->session->set_flashdata('message', 'formula deleted Successfully.');		redirect(ADMIN_PATH.'/formula');	}	protected function getList() {		$data['breadcrumbs'] = array();		$data['breadcrumbs'][] = array(			'text' => $this->lang->line('heading_title'),			'href' => admin_url('formula')		);		$this->template->add_package(array('datatable'),true);		$data['add'] = admin_url('formula/add');		$data['delete'] = admin_url('formula/delete');		$data['datatable_url'] = admin_url('formula/search');		$data['emp_sample']=base_url('storage/uploads/files/formula-sample.xlsx');		$data['heading_title'] = $this->lang->line('heading_title');		$data['text_list'] = $this->lang->line('text_list');		$data['text_no_results'] = $this->lang->line('text_no_results');		$data['text_confirm'] = $this->lang->line('text_confirm');		$data['button_add'] = $this->lang->line('button_add');		$data['button_edit'] = $this->lang->line('button_edit');		$data['button_delete'] = $this->lang->line('button_delete');		if(isset($this->error['warning'])){			$data['error'] 	= $this->error['warning'];		}		if ($this->input->post('selected')) {			$data['selected'] = (array)$this->input->post('selected');		} else {			$data['selected'] = array();		}		$this->template->view('formulas', $data);	}	protected function getForm(){		$data = array();		$data = $this->lang->load('formula');		$this->template->add_package(array('select2','datatable'),true);		$data['breadcrumbs'] = array();		$data['breadcrumbs'][] = array(			'text' => $this->lang->line('heading_title'),			'href' => admin_url('formula')		);		//printr($_SESSION);		$_SESSION['isLoggedIn'] = true;		$data['heading_title'] 	= $this->lang->line('heading_title');		$data['text_form'] = $this->uri->segment(4) ? "formula Edit" : "formula Add";		$data['text_image'] =$this->lang->line('text_image');		$data['text_none'] = $this->lang->line('text_none');		$data['text_clear'] = $this->lang->line('text_clear');		$data['cancel'] = admin_url('pages');		$data['button_save'] = $this->lang->line('button_save');		$data['button_cancel'] = $this->lang->line('button_cancel');		if(isset($this->error['warning'])){			$data['error'] 	= $this->error['warning'];		}		if ($this->uri->segment(4) && ($this->input->server('REQUEST_METHOD') != 'POST')) {			$formula = $this->formula_model->getFormula($this->uri->segment(4));		}				//branch		$this->load->model('branch/branch_model');		$data['branches']=$this->branch_model->getBranches();				//branch		$this->load->model('field_model');		$fields=$this->field_model->getFields();				foreach($fields as $field){			$data['fields'][$field->field_group][]=$field;		}		//printr($data['fields']);		//exit;		//printr($data['shifts']);		foreach($this->formula_model->getTableColumnsByName("formula") as $field) {			if($this->input->post($field)) {				$data[$field] = $this->input->post($field);			} else if(isset($formula->{$field}) && $formula->{$field}) {				$data[$field] = $formula->{$field};			} else {				$data[$field] = '';			}		}										$this->template->view('formulaForm',$data);	}	protected function validateForm() {		$user_id=$this->uri->segment(4);		$regex = "(\/?([a-zA-Z0-9+\$_-]\.?)+)*\/?"; // Path      	$regex .= "(\?[a-zA-Z+&\$_.-][a-zA-Z0-9;:@&%=+\/\$_.-]*)?"; // GET Query      	$regex .= "(#[a-zA-Z_.-][a-zA-Z0-9+\$_.-]*)?"; // Anchor 		$rules=array(
			'branch_id' => array(
				'field' => 'branch_id', 
				'label' => 'Branch', 
				'rules' => 'trim|required|max_length[100]'
			),			'formula' => array(				'field' => 'formula', 				'label' => 'Formula', 				'rules' => 'trim|required|max_length[100]'			),			'code' => array(				'field' => 'code', 				'label' => 'Code', 				'rules' => 'trim|required|max_length[100]'			),		);		$this->form_validation->set_rules($rules);		if ($this->form_validation->run() == TRUE)		{			return true;    	}		else		{			$this->error['warning']=$this->lang->line('error_warning');			return false;    	}		return !$this->error;	}		public function view(){		$this->lang->load('formula');				$this->template->add_package(array('datatable'),true);				if(isset($this->error['warning'])){			$data['error'] 	= $this->error['warning'];		}		if ($this->input->post('selected')) {			$data['selected'] = (array)$this->input->post('selected');		} else {			$data['selected'] = array();		}		if ($this->input->server('REQUEST_METHOD') === 'POST'){				$user_id=$this->uri->segment(4);			$this->formula_model->editFormula($user_id,$this->input->post());			$this->session->set_flashdata('message', 'formula Updated Successfully.');			redirect(ADMIN_PATH.'/formula');		}				if ($this->uri->segment(4) && ($this->input->server('REQUEST_METHOD') != 'POST')) {			$data['adjustments'] = $this->formula_model->getEmployeeFormulaAdjustment($this->uri->segment(4));					}		$this->template->view('adjustment', $data);	}		public function calculate_new(){		$json=[];		$formula_id=$this->input->post('formula_id');			$user_id=$this->input->post('user_id');		$this->user=$this->salary_model->getEmployeePayroll($user_id);		//$this->tax=$this->tax_model->getEmployeePayroll($user_id);		$formularow=$this->formula_model->getFormula($formula_id);		if($formularow){			$formula=$formularow->formula;			$calculator = new MathExecutor();						$calculator->setVarNotFoundHandler(				function ($varName) {					if ($varName == 'CTC') {						return "1000";					}else if ($varName == 'GROSS') {						return "2000";					}					return "0";				}			);			echo $calculator->execute($formula);								}	}			public function calculate(){		$json=[];		$formula_id=$this->input->post('formula_id');			$user_id=$this->input->post('user_id');		$this->user=$this->salary_model->getEmployeePayroll($user_id);		//printr($this->user);		//$this->tax=$this->tax_model->getEmployeePayroll($user_id);		$formularow=$this->formula_model->getFormula($formula_id);		if($formularow){			$formula=$formularow->formula;			$evaluator = new \Matex\Evaluator();			/*$evaluator->variables = [				'a' => 1			];*/			//echo $formula;			$evaluator->onVariable = [$this, 'doVariable'];			//if($formula)			//echo $formula;			//echo $evaluator->execute($formula);			if($formula==$evaluator->execute($formula))	{				$json['result']=$evaluator->execute($formula);			}else{				$json['result']=round($evaluator->execute($formula),2);			}		}else{			$json['result']='';		}		echo json_encode($json);		exit;	}				public function doVariable($name, &$value) {				switch ($name) {			case 'ctc':				$value = (float)$this->user->ctc;				//echo $value;				break;			case 'basic':				$value = (float)$this->user->basic;				break;			case 'esi_emp':			case 'esi_empr':			case 'pf_emp':			case 'pf_empr':			case 'gross':				$value=1000;				break;			case 'professional_tax':				$value = strtoupper($name);				break;		}	}}/* End of file hmvc.php *//* Location: ./application/widgets/hmvc/controllers/hmvc.php */