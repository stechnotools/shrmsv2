<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');use PhpOffice\PhpSpreadsheet\Spreadsheet;use PhpOffice\PhpSpreadsheet\Writer\Xlsx;class Salary extends Admin_Controller {	private $error = array();	public function __construct(){		parent::__construct();		$this->load->model('salary_model');		$this->load->model('employee/employee_model');				//$this->load->model('salary_shift_model');		//$this->load->model('salary_time_model');			}	public function index(){      	$this->lang->load('salary');		$this->template->set_meta_title($this->lang->line('heading_title'));		$this->getList();  	}	protected function search() {		$requestData= $_REQUEST;		$totalData = $this->salary_model->getTotalSalaries();		$totalFiltered = $totalData;		$filter_data = array(			'filter_search'  => $requestData['search']['value'],			'order'  		 => $requestData['order'][0]['dir'],			'sort' 			 => $requestData['order'][0]['column'],			'start' 		 => $requestData['start'],			'limit' 		 => $requestData['length']		);		$totalFiltered = $this->salary_model->getTotalSalaries($filter_data);		$filteredData = $this->salary_model->getSalaries($filter_data);		//printr($filteredData);		$datatable=array();		foreach($filteredData as $result) {			$earning=json_decode($result->earning,true);			if($earning){				$earning=array_sum($earning);			}			$deduction=json_decode($result->deduction,true);			if($deduction){				$deduction=array_sum($deduction);			}			$action  = '<div class="btn-group btn-group-sm pull-right">';			$action .= 		'<a class="btn btn-sm btn-primary" href="'.admin_url('salary/edit/'.$result->user_id).'"><i class="fa fa-pencil"></i></a>';			$action .=		'<a class="btn-sm btn btn-danger btn-remove" href="'.admin_url('salary/delete/'.$result->user_id).'" onclick="return confirm(\'Are you sure?\') ? true : false;"><i class="fa fa-trash-o"></i></a>';			$action .= '</div>';			$datatable[]=array(				'<input type="checkbox" name="selected[]" value="'.$result->user_id.'" />',				$result->employee_name,				$result->paycode,				$result->basic,				$earning,				$deduction,				$result->basic,				$action			);		}		//printr($datatable);		$json_data = array(			"draw"            => isset($requestData['draw']) ? intval( $requestData['draw'] ):1,			"recordsTotal"    => intval( $totalData ),			"recordsFiltered" => intval( $totalFiltered ),			"data"            => $datatable		);		$this->output		->set_content_type('application/json')		->set_output(json_encode($json_data));  // send data as json format	}	public function add(){		$this->lang->load('salary');		$this->template->set_meta_title($this->lang->line('heading_title'));		if ($this->input->server('REQUEST_METHOD') === 'POST' && $this->validateForm()){			$this->load->model('setting/setting_model');			$this->setting_model->editSetting('formula',$this->input->post('formula'));						$userid=$this->salary_model->addSalary($this->input->post());			$this->session->set_flashdata('message', 'salary Saved Successfully.');			redirect(ADMIN_PATH.'/salary');		}		$this->getForm();	}	public function edit(){		$this->lang->load('salary');		$this->template->set_meta_title($this->lang->line('heading_title'));		if ($this->input->server('REQUEST_METHOD') === 'POST' && $this->validateForm()){			//printr($this->input->post());		//exit;			$user_id=$this->uri->segment(4);			$this->load->model('setting/setting_model');			$this->setting_model->editSetting('formula',$this->input->post('formula'));						$this->salary_model->editSalary($user_id,$this->input->post());			$this->session->set_flashdata('message', 'salary Updated Successfully.');			redirect(ADMIN_PATH.'/salary');		}		$this->getForm();	}	public function delete(){		if ($this->input->post('selected')){         $selected = $this->input->post('selected');      }else{         $selected = (array) $this->uri->segment(4);       }		$this->salary_model->deleteSalary($selected);		$this->session->set_flashdata('message', 'salary deleted Successfully.');		redirect(ADMIN_PATH.'/salary');	}	protected function getList() {		$data['breadcrumbs'] = array();		$data['breadcrumbs'][] = array(			'text' => $this->lang->line('heading_title'),			'href' => admin_url('salary')		);		$this->template->add_package(array('datatable'),true);		$data['add'] = admin_url('salary/add');		$data['delete'] = admin_url('salary/delete');		$data['datatable_url'] = admin_url('salary/search');		$data['emp_sample']=base_url('storage/uploads/files/salary-sample.xlsx');		$data['heading_title'] = $this->lang->line('heading_title');		$data['text_list'] = $this->lang->line('text_list');		$data['text_no_results'] = $this->lang->line('text_no_results');		$data['text_confirm'] = $this->lang->line('text_confirm');		$data['button_add'] = $this->lang->line('button_add');		$data['button_edit'] = $this->lang->line('button_edit');		$data['button_delete'] = $this->lang->line('button_delete');		if(isset($this->error['warning'])){			$data['error'] 	= $this->error['warning'];		}		if ($this->input->post('selected')) {			$data['selected'] = (array)$this->input->post('selected');		} else {			$data['selected'] = array();		}		$this->template->view('salaries', $data);	}	protected function getForm(){		$data = array();		$data = $this->lang->load('salary');		$this->template->add_package(array('ckeditor','ckfinder','colorbox','select2','datepicker','datatable'),true);		$data['breadcrumbs'] = array();		$data['breadcrumbs'][] = array(			'text' => $this->lang->line('heading_title'),			'href' => admin_url('salary')		);		//printr($_SESSION);		$_SESSION['isLoggedIn'] = true;		$data['heading_title'] 	= $this->lang->line('heading_title');		$data['text_form'] = $this->uri->segment(4) ? "salary Edit" : "salary Add";		$data['text_image'] =$this->lang->line('text_image');		$data['text_none'] = $this->lang->line('text_none');		$data['text_clear'] = $this->lang->line('text_clear');		$data['cancel'] = admin_url('pages');		$data['button_save'] = $this->lang->line('button_save');		$data['button_cancel'] = $this->lang->line('button_cancel');		if(isset($this->error['warning'])){			$data['error'] 	= $this->error['warning'];		}		if ($this->uri->segment(4) && ($this->input->server('REQUEST_METHOD') != 'POST')) {			$emp_payroll = $this->salary_model->getEmployeePayroll($this->uri->segment(4));			$empoffice_info = $this->employee_model->getEmployeeOffice($this->uri->segment(4));			$data['salary_id']=$this->uri->segment(4);			$data['edit']=true;		}else{			$data['edit']=false;			$data['salary_id']=0;		}		if($this->input->get('id')){			$empoffice_info = $this->employee_model->getEmployeeOffice($this->input->get('id'));		}				//branch				//printr($data['shifts']);		foreach($this->salary_model->getTableColumnsByName("employee_payroll") as $field) {						if($this->input->post($field)) {				$data[$field] = $this->input->post($field);			} else if(isset($emp_payroll->{$field}) && $emp_payroll->{$field}) {				$data[$field] = $emp_payroll->{$field};			} else {				$data[$field] = '';			}						if ($this->input->post("formula[formula_$field]")){				$data['formula']["formula_$field"] = $this->input->post("formula[formula_$field]");			} else {				$formula='formula_'.$field;				$data['formula']["formula_$field"] = $this->settings->{$formula};			}					}						//printr($data['formula']);		//exit;						if (!empty($empoffice_info)) {			$data['user_id'] = $empoffice_info->user_id;		} else {			$data['user_id'] = '';		}				if ($this->input->post('paycode')) {			$data['paycode'] = $this->input->post('paycode');		} elseif (!empty($empoffice_info)) {			$data['paycode'] = $empoffice_info->paycode;		} else {			$data['paycode'] = '';		}				if ($this->input->post('employee_name')) {			$data['employee_name'] = $this->input->post('employee_name');		} elseif (!empty($empoffice_info)) {			$data['employee_name'] = $empoffice_info->employee_name;		} else {			$data['employee_name'] = '';		}				if ($this->input->post('card_no')) {			$data['card_no'] = $this->input->post('card_no');		} elseif (!empty($empoffice_info)) {			$data['card_no'] = $empoffice_info->card_no;		} else {			$data['card_no'] = '';		}				if ($this->input->post('branch_name')) {			$data['branch_name'] = $this->input->post('branch_name');		} elseif (!empty($empoffice_info)) {			$data['branch_name'] = $empoffice_info->branch_name;		} else {			$data['branch_name'] = '';		}				if ($this->input->post('department_name')) {			$data['department_name'] = $this->input->post('department_name');		} elseif (!empty($empoffice_info)) {			$data['department_name'] = $empoffice_info->department_name;		} else {			$data['department_name'] = '';		}				if ($this->input->post('designation_name')) {			$data['designation_name'] = $this->input->post('designation_name');		} elseif (!empty($empoffice_info)) {			$data['designation_name'] = $empoffice_info->designation_name;		} else {			$data['designation_name'] = '';		}				if ($this->input->post('salary_mode')) {			$data['salary_mode'] = $this->input->post('salary_mode');		} elseif (!empty($emp_payroll)) {			$data['salary_mode'] = $emp_payroll->salary_mode;		} else {			$data['salary_mode'] = 'cash';		}				$this->load->model('formula/formula_model');		$data['formulas']=$this->formula_model->getFormulas();		$this->load->model('field_model');		$data['fields']=$this->field_model->getFields();		$this->load->model('tax/tax_model');		$data['taxs']=$this->tax_model->getTaxs();								foreach($data['fields'] as $field){			$name=$field->field;			if($field->type=="earning"){				if ($this->input->post("earning[$name]")) {					$data['_earning'][$name] = $this->input->post("earning[$name]");				} elseif (!empty($emp_payroll->earning)) {					$earning=json_decode($emp_payroll->earning,true);					//printr($earning);					$data['_earning'][$name] = isset($earning[$name])?$earning[$name]:'';				} else {					$data['_earning'][$name] = '';				}			}else{				if ($this->input->post("deduction[$name]")) {					$data['_deduction'][$name] = $this->input->post("deduction[$name]");				} elseif (!empty($emp_payroll->deduction)) {					$deduction=json_decode($emp_payroll->deduction,true);										$data['_deduction'][$name] = isset($deduction[$name])?$deduction[$name]:'';				} else {					$data['_deduction'][$name] = '';				}			}						if ($this->input->post("formula[formula_$name]")){				$data['formula']["formula_$name"] = $this->input->post("formula[formula_$name]");			} else {				$formula='formula_'.$name;				$data['formula']["formula_$name"] = $this->settings->{$formula};			}					}				foreach($data['taxs'] as $tax){			$name=$tax->field;						if ($this->input->post("deduction[$name]")) {				$data['_deduction'][$name] = $this->input->post("deduction[$name]");			} elseif (!empty($emp_payroll->deduction)) {				$deduction=json_decode($emp_payroll->deduction,true);				$data['_deduction'][$name] = isset($deduction[$name])?$deduction[$name]:'';			} else {				$data['_deduction'][$name] = '';			}									if ($this->input->post("formula[formula_$name]")){				$data['formula']["formula_$name"] = $this->input->post("formula[formula_$name]");			} else {				$formula='formula_'.$name;				$data['formula']["formula_$name"] = $this->settings->{$formula};			}					}						$this->template->view('salaryForm',$data);	}	public function sheet(){		$this->load->model('tax/tax_model');		$this->lang->load('salary');		$data['breadcrumbs'] = array();		$data['breadcrumbs'][] = array(			'text' => 'Salary Sheet',			'href' => admin_url('salary/sheet')		);		$data['heading_title'] 	= 'Salary Sheet';				$this->template->add_package(array('datepicker','table_export','select2','datatable'),true);				if($this->input->get('branch_id')){			$data['branch_id']=$this->input->get('branch_id');		}else{			$data['branch_id']='';		}		if($this->input->get('month')){			$data['month']=$this->input->get('month');		}else{			$data['month']=date('m-Y');		}				$filter_data = array(			'branch_id' => $data['branch_id'],			'month'  	=> $data['month'],		);				//echo $data['month'];		$results = $this->salary_model->getSalarySheets($filter_data);				//printr($results);		$data['sheets']=[];		foreach($results as $result){						//all branch calculation						$total_days=(float)$result->month_days;			//echo $total_days;			$salary_days=(float)$result->present_days+((float)$result->el+(float)$result->cl+(float)$result->sl+(float)$result->cof);									//echo $salary_days;			$basic=($result->basic*(float)$salary_days)/(float)$total_days;			$perday_salary=$basic/(float)$total_days;			$perday_nsalary=(float)$result->ctc/(float)$total_days;			//echo $perday_nsalary."<br>";			$ot_amount=$perday_nsalary*((float)$result->holidays+(float)$result->ot+(float)$result->pwo);						$hra=((float)$result->hra/(float)$total_days)*(float)$result->present_days;			$conveyance=((float)$result->conveyance/(float)$total_days)*(float)$result->present_days;						/*if($result->basic){				$result->ctc=($result->basic/(float)$result->month_days)*(float)$result->present_days;			}*/						$earning=json_decode($result->earning);			$deduction=json_decode($result->deduction);						$medical=isset($earning->medical_allowance)?(((float)$earning->medical_allowance/(float)$total_days)*(float)$result->present_days):0;			$special=isset($earning->special_allowance)?(((float)$earning->special_allowance/(float)$total_days)*(float)$result->present_days):0;			$other_allowance=isset($earning->other_allowance)?(((float)$earning->other_allowance/(float)$total_days)*(float)$result->present_days):0;						$gross=$basic+$hra+$conveyance+$medical+$other_allowance+$special;						$earn_salary=$perday_salary*$salary_days;			//*$salary_days+$result->arrear_days						$esi_employees=isset($deduction->esi_emp)?$deduction->esi_emp:0;			if(is_string($esi_employees)){				$esi_employees=$this->taxRate($esi_employees,$gross);			}			$esi_employer=isset($deduction->esi_empr)?$deduction->esi_empr:0;			if(is_string($esi_employer)){				$esi_employer=$this->taxRate($esi_employer,$gross);			}			$pf_employee=isset($deduction->pf_emp)?$deduction->pf_emp:0;			if(is_string($pf_employee)){				$pf_employee=$this->taxRate($pf_employee,$basic);			}			$pf_employer=isset($deduction->pf_empr)?$deduction->pf_empr:0;			if(is_string($pf_employer)){				$pf_employer=$this->taxRate($pf_employer,$basic);			}			$pt=isset($deduction->professional_tax)?$deduction->professional_tax:0;			if(is_string($pt)){				$pt=$this->taxRate($pt,$result->ctc);			}						$net_salary=$gross-$esi_employees-$pf_employee-$pt;						$data['sheets'][]=array(				'paycode'=>$result->paycode,				'emp_name'=>$result->employee_name,				'designation_name'=>$result->designation_name,				'extra_duty'=>$result->arrear_days,				'pwo'=>$result->pwo,				'total_days'=>$result->month_days,				'salary_days'=>$salary_days,				'ctc'=>round($result->ctc),				'basic'=>round($basic),				'hra'=>round($hra),				'conveyance'=>round($conveyance),				'medical_allowance'=>round($medical),				'special_allowance'=>round($special),				'other_allowance'=>round($other_allowance),				'allownace'=>0,				'deduction'=>0,				'ot_amount'=>round($ot_amount),				'gross'=>round($gross),				'earn_salary'=>round($gross),				'esi_employees'=>round($esi_employees),				'esi_employer'=>round($esi_employer),				'pf_employee'=>round($pf_employee),				'epf_employer'=>round($pf_employer),				'pt'=>round($pt),				'tds'=>round($result->tds),				'advance'=>0,				'loan'=>0,				'net_salary'=>round($net_salary)			);		}		$this->load->model('branch/branch_model');		$data['branches']=$this->branch_model->getBranches();								$this->template->view('salarySheet',$data);	}		private function taxRate($field,$total){		$this->load->model('tax/tax_model');		$rates=$this->tax_model->getTaxRateByField($field);		$rate=0;		foreach($rates as $_rate){			if($total > $_rate->to_amount && $total <= $_rate->from_amount){				if($_rate->type=="P"){					$rate=$total*$_rate->rate/100;				}else{					$rate=$_rate->rate;				}				break;			}		}		return $rate;	}			protected function validateForm() {		$user_id=$this->uri->segment(4);		$regex = "(\/?([a-zA-Z0-9+\$_-]\.?)+)*\/?"; // Path      	$regex .= "(\?[a-zA-Z+&\$_.-][a-zA-Z0-9;:@&%=+\/\$_.-]*)?"; // GET Query      	$regex .= "(#[a-zA-Z_.-][a-zA-Z0-9+\$_.-]*)?"; // Anchor 		$rules=array(			'paycode' => array(				'field' => 'paycode', 				'label' => 'Paycode', 				'rules' => 'trim|required|max_length[100]'			),			/*'basic' => array(				'field' => 'basic', 				'label' => 'basic', 				'rules' => 'trim|required|max_length[100]'			),			'ctc' => array(				'field' => 'ctc', 				'label' => 'ctc', 				'rules' => 'trim|required|max_length[100]'			),*/					);		$this->form_validation->set_rules($rules);		if ($this->form_validation->run() == TRUE)		{			return true;    	}		else		{			$this->error['warning']=$this->lang->line('error_warning');			return false;    	}		return !$this->error;	}	public function email_check($email, $user_id=''){		$salary = $this->salary_model->getEmployeeByEmail($email);      	if (!empty($salary) && $salary->id != $user_id){			$this->form_validation->set_message('email_check', "This email address is already in use.");         	return FALSE;		}else{         	return TRUE;      	}   	}	public function username_check($username, $user_id=''){      $salary = $this->salary_model->getEmployeeByUsername($username);      if (!empty($salary) && $salary->id != $user_id){            $this->form_validation->set_message('username_check', "This {field} provided is already in use.");            return FALSE;		}else{         return TRUE;      }   }	public function autocomplete(){		$json = array();		if (is_ajax()){			$filter_data = array(				'filter_search'  => $this->input->get('searchTerm'),				'start' 		 => 0,				'limit' 		 => 5			);			$filteredData = $this->salary_model->getEmployees($filter_data);			//printr($filteredData);			foreach($filteredData as $result){				$json[] = array(					'id' => $result->id,					'text'    => $result->paycode,					'empname'    => $result->salary_name,					'card_no' => $result->card_no,					'department_name'     => $result->department_name,				);			}			echo json_encode($json);		}else{         	return show_404();      	}	}		}/* End of file hmvc.php *//* Location: ./application/widgets/hmvc/controllers/hmvc.php */